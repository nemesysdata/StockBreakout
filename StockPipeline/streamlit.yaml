apiVersion: v1
kind: ServiceAccount
metadata:
  name: app-access
  namespace: stock-analyzer
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: stock-analyzer
  name: app-role
rules:
  - apiGroups: [""]  # Recursos principais, como pods e services
    resources: ["pods", "services", "configmaps"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]  # Recursos de apps, como deployments
    resources: ["deployments"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: app-role-binding
  namespace: stock-analyzer
subjects:
  - kind: ServiceAccount
    name: app-access
    namespace: stock-analyzer
roleRef:
  kind: Role
  name: app-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: app-cluster-role
rules:
  - apiGroups: [""]  # Recursos principais, como pods e services
    resources: ["pods", "services", "configmaps"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]  # Recursos de apps, como deployments
    resources: ["deployments"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: app-cluster-role-binding
subjects:
  - kind: ServiceAccount
    name: app-access
    namespace: stock-analyzer
roleRef:
  kind: ClusterRole
  name: app-cluster-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stock-deployment
  namespace: stock-analyzer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: stock-deployment
  template:
    metadata:
      labels:
        app: stock-deployment
    spec:
      serviceAccountName: app-access
      containers:
        - name: stock-deployment
          image: nemesysdata/stock-ubuntu:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8501
          # command to enter in ~/app/Dasboard directory and run the streamlit app inside the poetry shell
          command: ["/bin/sh"]
          args: ["-c", "cd /root/app/Dashboard && poetry install && poetry run streamlit run dashboard.py"]
---
#Service to export in ingress the streamlit app
apiVersion: v1
kind: Service
metadata:
  name: stock-service
  namespace: stock-analyzer  
spec:
  selector:
    app: stock-deployment
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8501
---
#Ingress to expose the streamlit app
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: stock-ingress
  namespace: stock-analyzer  
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
    - host: stock.195-154-197-175.traefik.me
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: stock-service
                port:
                  number: 80
